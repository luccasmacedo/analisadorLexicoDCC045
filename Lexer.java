// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Specification.jflex

/*Autores: Fernando Dellão Menini 201935005,
           Luccas de Macedo Sodré 201535013
*/
    //Codigo do Usuário


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\5\u0900\1\u0a00\1\u0b00\1\u0c00\2\u0800\1\u0d00\3\u0800"+
    "\1\u0e00\1\u0f00\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\2\u0800\1\u1900\7\u0800\1\u1a00\1\u1b00"+
    "\170\u0800\1\u1c00\1\u1d00\1\u1e00\1\u1f00\1\u2000\1\u2100\54\u0800"+
    "\10\u2200\33\u0800\1\u2300\3\u0800\1\u2400\4\u0800\1\u2500\7\u0800"+
    "\1\u2600\1\u2700\2\u0800\1\u2800\1\u2900\1\u2a00\1\u0800\1\u0a00"+
    "\1\u0800\1\u2b00\1\u2700\1\u2c00\3\u0800\1\u2000\1\u2d00\114\u0800"+
    "\1\u2e00\1\u2000\2\u0800\1\u2f00\145\u0800\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\11\u0800\1\u3400\1\u2a00\6\u0800\1\u3500\7\u0800\1\u3600"+
    "\u0f0e\u0800";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\3\0\1\10\1\11\1\12\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\32\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\44\1\45\1\47"+
    "\1\45\1\50\1\40\1\51\1\45\1\52\1\53\1\54"+
    "\1\55\1\45\1\56\3\45\1\57\1\60\1\61\7\0"+
    "\1\3\44\0\1\45\12\0\1\45\4\0\1\45\5\0"+
    "\27\31\1\0\7\31\30\45\1\0\10\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\2\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\2\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\2\31\1\45\1\31\1\45"+
    "\1\31\3\45\2\31\1\45\1\31\1\45\2\31\1\45"+
    "\3\31\2\45\4\31\1\45\2\31\1\45\3\31\3\45"+
    "\2\31\1\45\2\31\1\45\1\31\1\45\1\31\1\45"+
    "\2\31\1\45\1\31\2\45\1\31\1\45\2\31\1\45"+
    "\3\31\1\45\1\31\1\45\2\31\2\45\1\0\1\31"+
    "\3\45\4\0\1\31\1\0\1\45\1\31\1\0\1\45"+
    "\1\31\1\0\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\2\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\2\45\1\31\1\0\1\45"+
    "\1\31\1\45\3\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\7\45\2\31\1\45"+
    "\2\31\2\45\1\31\1\45\4\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\105\45\1\0\44\45"+
    "\7\0\2\45\36\0\5\45\140\0\1\45\52\0\1\31"+
    "\1\45\1\31\1\45\2\0\1\31\1\45\2\0\4\45"+
    "\1\0\1\31\6\0\1\31\1\0\3\31\1\0\1\31"+
    "\1\0\2\31\1\45\21\31\1\0\11\31\43\45\1\31"+
    "\2\45\3\31\3\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\5\45\1\31\1\45\1\0\1\31\1\45"+
    "\2\31\2\45\63\31\60\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\10\0\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\2\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\2\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\0\46\31\11\0\51\45\327\0"+
    "\12\62\206\0\12\62\306\0\12\62\u019c\0\12\62\166\0"+
    "\12\62\140\0\12\62\166\0\12\62\106\0\12\62\u0116\0"+
    "\12\62\106\0\12\62\6\0\46\31\1\0\1\31\5\0"+
    "\1\31\2\0\53\45\2\0\3\45\240\0\126\31\2\0"+
    "\6\45\342\0\12\62\46\0\12\62\u012c\0\12\62\200\0"+
    "\12\62\246\0\12\62\6\0\12\62\266\0\12\62\126\0"+
    "\12\62\206\0\12\62\6\0\12\62\46\0\11\45\7\0"+
    "\53\31\2\0\3\31\100\0\300\45\100\0\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\11\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\11\45\10\31\6\45"+
    "\2\0\6\31\2\0\10\45\10\31\10\45\10\31\6\45"+
    "\2\0\6\31\2\0\10\45\1\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\1\31\10\45\10\31\16\45\2\0"+
    "\10\45\10\0\10\45\10\0\10\45\10\0\5\45\1\0"+
    "\2\45\4\31\2\0\1\45\3\0\3\45\1\0\2\45"+
    "\4\31\4\0\4\45\2\0\2\45\4\31\4\0\10\45"+
    "\5\31\5\0\3\45\1\0\2\45\4\31\54\0\2\3"+
    "\107\0\1\45\15\0\1\45\20\0\15\45\145\0\1\31"+
    "\4\0\1\31\2\0\1\45\3\31\2\45\3\31\1\45"+
    "\1\0\1\31\3\0\5\31\6\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\4\31\1\0\1\45\4\31\1\45"+
    "\4\0\1\45\2\0\2\45\2\31\5\0\1\31\4\45"+
    "\4\0\1\45\21\0\20\31\20\45\3\0\1\31\1\45"+
    "\u0131\0\32\31\32\45\26\0\57\31\1\0\57\45\1\0"+
    "\1\31\1\45\3\31\2\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\4\31\1\45\1\31\2\45\1\31\10\45"+
    "\3\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\2\45\6\0\1\31\1\45\1\31"+
    "\1\45\3\0\1\31\1\45\14\0\46\45\1\0\1\45"+
    "\5\0\1\45\362\0\12\62\26\0\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\22\0\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\1\45"+
    "\1\31\1\45\1\31\1\45\1\31\1\45\1\31\3\45"+
    "\204\0\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\3\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\12\45\1\31\1\45\1\31"+
    "\1\45\2\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\3\0\1\31\1\45\1\31\1\45"+
    "\1\0\1\31\1\45\1\31\3\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\1\31"+
    "\1\45\5\31\1\45\5\31\1\45\1\31\1\45\1\31"+
    "\1\45\1\31\1\45\1\31\1\45\1\31\1\45\2\0"+
    "\1\31\1\45\3\31\61\0\3\45\325\0\12\62\46\0"+
    "\12\62\306\0\12\62\26\0\12\62\126\0\12\62\326\0"+
    "\53\45\1\0\14\45\10\0\120\45\60\0\12\62\6\0"+
    "\u0100\3\7\45\14\0\5\45\370\0\12\62\7\0\32\31"+
    "\6\0\32\45\245\0\50\31\50\45\120\0\12\62\6\0"+
    "\44\31\4\0\44\45\204\0\63\31\15\0\63\45\75\0"+
    "\12\62\u012c\0\12\62\200\0\12\62\74\0\12\62\220\0"+
    "\12\62\u0116\0\12\62\126\0\12\62\146\0\12\62\326\0"+
    "\40\31\40\45\12\62\146\0\12\62\106\0\12\62\266\0"+
    "\12\62\326\0\40\31\40\45\200\0\32\31\32\45\32\31"+
    "\7\45\1\0\22\45\32\31\32\45\1\31\1\0\2\31"+
    "\2\0\1\31\2\0\2\31\2\0\4\31\1\0\10\31"+
    "\4\45\1\0\1\45\1\0\7\45\1\0\13\45\32\31"+
    "\32\45\2\31\1\0\4\31\2\0\10\31\1\0\7\31"+
    "\1\0\32\45\2\31\1\0\4\31\1\0\5\31\1\0"+
    "\1\31\3\0\7\31\1\0\32\45\32\31\32\45\32\31"+
    "\32\45\32\31\32\45\32\31\32\45\32\31\32\45\32\31"+
    "\34\45\2\0\31\31\1\0\31\45\1\0\6\45\31\31"+
    "\1\0\31\45\1\0\6\45\31\31\1\0\31\45\1\0"+
    "\6\45\31\31\1\0\31\45\1\0\6\45\31\31\1\0"+
    "\31\45\1\0\6\45\1\31\1\45\2\0\62\62\100\0"+
    "\12\62\266\0\42\31\42\45\14\0\12\62\326\0\32\31"+
    "\6\0\32\31\6\0\32\31\166\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[14080];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\10\24\1\25"+
    "\1\26\1\2\1\27\1\30\3\0\1\31\1\0\1\14"+
    "\1\32\1\33\1\24\1\0\1\34\2\24\1\0\3\24"+
    "\1\35\1\36\1\37\2\0\1\24\1\40\1\0\1\24"+
    "\1\0\1\24\1\0\1\41\1\0\1\24\1\42\1\0"+
    "\1\43\1\0\1\44\1\45\1\0\1\46\2\0\1\47"+
    "\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\146\0\231\0\314\0\146\0\377"+
    "\0\u0132\0\146\0\146\0\146\0\146\0\u0165\0\u0198\0\146"+
    "\0\146\0\u01cb\0\u01fe\0\146\0\146\0\u0231\0\146\0\u0264"+
    "\0\146\0\146\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\146\0\u0462\0\146\0\146\0\u0495"+
    "\0\u04c8\0\u04fb\0\u0198\0\u0198\0\u052e\0\146\0\146\0\u0561"+
    "\0\u0594\0\146\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\146\0\146\0\146\0\u06f9\0\u072c\0\u075f\0\146\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\146\0\u0891\0\u08c4\0\146"+
    "\0\u08f7\0\146\0\u092a\0\146\0\146\0\u095d\0\146\0\u0990"+
    "\0\u09c3\0\146\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\3\1\32\1\3\4\33\1\34\1\35"+
    "\2\33\1\36\1\33\1\37\1\40\1\41\1\33\1\42"+
    "\2\33\1\43\1\3\1\44\1\3\17\4\1\3\37\4"+
    "\1\45\1\4\1\3\1\4\65\0\1\4\107\0\1\46"+
    "\44\0\1\47\75\0\1\50\6\0\1\51\2\0\1\50"+
    "\1\0\1\50\1\0\1\50\4\0\1\50\3\0\1\50"+
    "\2\0\1\50\23\0\1\52\65\0\2\53\57\0\1\54"+
    "\1\0\1\55\1\22\36\0\1\55\24\0\1\56\65\0"+
    "\1\57\41\0\1\30\3\0\1\30\11\0\1\30\10\0"+
    "\1\30\3\0\2\30\1\0\1\30\1\0\2\30\2\0"+
    "\1\30\1\0\1\30\3\0\1\30\10\0\1\33\3\0"+
    "\1\33\11\0\1\33\10\0\1\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\2\0\1\33\1\0\1\33\3\0"+
    "\1\33\10\0\1\33\3\0\1\33\11\0\1\33\10\0"+
    "\1\33\3\0\2\33\1\0\1\33\1\0\1\33\1\60"+
    "\2\0\1\33\1\0\1\33\3\0\1\33\10\0\1\33"+
    "\3\0\1\33\11\0\1\33\10\0\1\33\1\61\2\0"+
    "\2\33\1\0\1\33\1\0\2\33\2\0\1\33\1\0"+
    "\1\33\3\0\1\33\10\0\1\33\3\0\1\33\11\0"+
    "\1\33\10\0\1\33\3\0\2\33\1\62\1\33\1\0"+
    "\2\33\2\0\1\33\1\0\1\63\3\0\1\33\10\0"+
    "\1\33\3\0\1\33\11\0\1\33\10\0\1\33\3\0"+
    "\1\33\1\64\1\0\1\33\1\0\2\33\2\0\1\33"+
    "\1\0\1\33\1\65\2\0\1\33\10\0\1\33\3\0"+
    "\1\33\11\0\1\33\10\0\1\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\2\0\1\66\1\0\1\33\3\0"+
    "\1\33\10\0\1\33\3\0\1\33\11\0\1\33\10\0"+
    "\1\33\3\0\1\33\1\67\1\0\1\33\1\0\2\33"+
    "\2\0\1\33\1\0\1\33\3\0\1\33\10\0\1\33"+
    "\3\0\1\33\11\0\1\33\10\0\1\33\3\0\2\33"+
    "\1\0\1\33\1\0\2\33\2\0\1\70\1\0\1\33"+
    "\3\0\1\33\21\0\1\71\62\0\1\72\55\0\1\73"+
    "\56\0\1\50\3\0\1\50\20\0\1\50\3\0\1\50"+
    "\10\0\1\50\1\0\1\50\1\0\1\50\3\0\1\50"+
    "\2\0\2\52\1\4\2\0\1\5\55\52\22\0\2\55"+
    "\36\0\1\55\6\0\1\33\3\0\1\33\11\0\1\33"+
    "\10\0\1\33\3\0\2\33\1\0\1\33\1\0\2\33"+
    "\2\0\1\33\1\74\1\33\3\0\1\33\51\0\1\75"+
    "\21\0\1\33\3\0\1\33\11\0\1\33\10\0\1\33"+
    "\3\0\1\33\1\76\1\0\1\33\1\0\2\33\2\0"+
    "\1\33\1\0\1\33\3\0\1\33\10\0\1\33\3\0"+
    "\1\33\11\0\1\33\10\0\1\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\2\0\1\33\1\0\1\33\1\0"+
    "\1\77\1\0\1\33\51\0\1\100\21\0\1\33\3\0"+
    "\1\33\11\0\1\33\10\0\1\33\3\0\2\33\1\0"+
    "\1\33\1\0\1\101\1\33\2\0\1\33\1\0\1\33"+
    "\3\0\1\33\10\0\1\33\3\0\1\33\11\0\1\33"+
    "\10\0\1\33\1\102\2\0\2\33\1\0\1\33\1\0"+
    "\2\33\2\0\1\33\1\0\1\103\3\0\1\33\10\0"+
    "\1\33\3\0\1\33\11\0\1\33\10\0\1\33\3\0"+
    "\2\33\1\0\1\33\1\0\2\33\2\0\1\33\1\0"+
    "\1\33\1\104\2\0\1\33\44\0\1\105\73\0\1\106"+
    "\15\0\1\33\3\0\1\33\11\0\1\33\10\0\1\33"+
    "\3\0\2\33\1\0\1\33\1\0\2\33\2\0\1\107"+
    "\1\0\1\33\3\0\1\33\51\0\1\110\21\0\1\33"+
    "\3\0\1\33\11\0\1\33\10\0\1\33\3\0\2\33"+
    "\1\0\1\33\1\0\2\33\1\111\1\0\1\33\1\0"+
    "\1\33\3\0\1\33\43\0\1\112\27\0\1\33\3\0"+
    "\1\33\11\0\1\33\10\0\1\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\2\0\1\33\1\0\1\33\1\113"+
    "\2\0\1\33\44\0\1\114\62\0\1\115\26\0\1\33"+
    "\3\0\1\33\11\0\1\33\10\0\1\33\1\116\2\0"+
    "\2\33\1\0\1\33\1\0\2\33\2\0\1\33\1\0"+
    "\1\33\3\0\1\33\56\0\1\117\60\0\1\120\64\0"+
    "\1\121\56\0\1\122\54\0\1\123\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\1\11\2\1\4\11\2\1\2\11"+
    "\2\1\2\11\1\1\1\11\1\1\2\11\11\1\1\11"+
    "\1\1\2\11\3\0\1\1\1\0\1\1\2\11\1\1"+
    "\1\0\1\11\2\1\1\0\3\1\3\11\2\0\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\2\11\1\0\1\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    //Inserção de código arbitrário

    private int ntk;

    public int readedTokens(){
        return ntk;
    }

    private Token symbol(TokenType t){
        ntk++;
        return new Token(t, yytext(), yyline + 1, yycolumn + 1);
    }

    private Token symbol(TokenType t, Object value){
        ntk++;
        return new Token(t, value, yyline + 1, yycolumn + 1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      ntk = 0;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character <"+yytext()+">");
            }
            // fall through
          case 41: break;
          case 2:
            { 
            }
            // fall through
          case 42: break;
          case 3:
            { return symbol(TokenType.LOGICAL_NOT);
            }
            // fall through
          case 43: break;
          case 4:
            { return symbol(TokenType.MODULUS);
            }
            // fall through
          case 44: break;
          case 5:
            { return symbol(TokenType.RIGHT_PARENTHESIS);
            }
            // fall through
          case 45: break;
          case 6:
            { return symbol(TokenType.TIMES);
            }
            // fall through
          case 46: break;
          case 7:
            { return symbol(TokenType.PLUS);
            }
            // fall through
          case 47: break;
          case 8:
            { return symbol(TokenType.COMMA);
            }
            // fall through
          case 48: break;
          case 9:
            { return symbol(TokenType.MINUS);
            }
            // fall through
          case 49: break;
          case 10:
            { return symbol(TokenType.DOT);
            }
            // fall through
          case 50: break;
          case 11:
            { return symbol(TokenType.DIVISION);
            }
            // fall through
          case 51: break;
          case 12:
            { return symbol(TokenType.INT);
            }
            // fall through
          case 52: break;
          case 13:
            { return symbol(TokenType.SEMI);
            }
            // fall through
          case 53: break;
          case 14:
            { return symbol(TokenType.LESS_THAN);
            }
            // fall through
          case 54: break;
          case 15:
            { return symbol(TokenType.EQ);
            }
            // fall through
          case 55: break;
          case 16:
            { return symbol(TokenType.GREATER_THAN);
            }
            // fall through
          case 56: break;
          case 17:
            { return symbol(TokenType.TYPE_ID);
            }
            // fall through
          case 57: break;
          case 18:
            { return symbol(TokenType.LEFT_SQUARE_BRACKETS);
            }
            // fall through
          case 58: break;
          case 19:
            { return symbol(TokenType.RIGHT_SQUARE_BRACKETS);
            }
            // fall through
          case 59: break;
          case 20:
            { return symbol(TokenType.VARIABLE_ID);
            }
            // fall through
          case 60: break;
          case 21:
            { return symbol(TokenType.LEFT_CURLY_BRACES);
            }
            // fall through
          case 61: break;
          case 22:
            { return symbol(TokenType.RIGHT_CURLY_BRACES);
            }
            // fall through
          case 62: break;
          case 23:
            { return symbol(TokenType.DIFFERENT);
            }
            // fall through
          case 63: break;
          case 24:
            { return symbol(TokenType.LOGICAL_AND);
            }
            // fall through
          case 64: break;
          case 25:
            { return symbol(TokenType.FLOAT);
            }
            // fall through
          case 65: break;
          case 26:
            { return symbol(TokenType.TYPE_DEFINITION);
            }
            // fall through
          case 66: break;
          case 27:
            { return symbol(TokenType.EQUAL_TO);
            }
            // fall through
          case 67: break;
          case 28:
            { return symbol(TokenType.IF);
            }
            // fall through
          case 68: break;
          case 29:
            { yybegin(COMMENT);
            }
            // fall through
          case 69: break;
          case 30:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 70: break;
          case 31:
            { return symbol(TokenType.CHAR);
            }
            // fall through
          case 71: break;
          case 32:
            { return symbol(TokenType.NEW);
            }
            // fall through
          case 72: break;
          case 33:
            { return symbol(TokenType.ELSE);
            }
            // fall through
          case 73: break;
          case 34:
            { return symbol(TokenType.NULL);
            }
            // fall through
          case 74: break;
          case 35:
            { return symbol(TokenType.READ);
            }
            // fall through
          case 75: break;
          case 36:
            { return symbol(TokenType.TRUE);
            }
            // fall through
          case 76: break;
          case 37:
            { return symbol(TokenType.FALSE);
            }
            // fall through
          case 77: break;
          case 38:
            { return symbol(TokenType.PRINT);
            }
            // fall through
          case 78: break;
          case 39:
            { return symbol(TokenType.RETURN);
            }
            // fall through
          case 79: break;
          case 40:
            { return symbol(TokenType.ITERATE);
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
